#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy, roslaunch
import numpy as np
import subprocess
import os
import sys
from enum import Enum
from std_msgs.msg import UInt8
 
class CoreNodeController():
    def __init__(self):
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('nodes', 'launch/')
        self.sub_mode_control = rospy.Subscriber('task_finished', UInt8, self.cbReceiveMode, queue_size=1)
        self.CurrentMode = Enum('CurrentMode', 'reverse_parking up_hill right_angle side_parking s_shape')

        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)

        self.current_mode = self.CurrentMode.reverse_parking.value
        
        self.launch = roslaunch.scriptapi.ROSLaunch()

        print(self.ros_package_path + self.CurrentMode(self.current_mode).name + ".launch")
        self.launch = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + self.CurrentMode(self.current_mode).name + ".launch"])
        self.launch.start()


    def cbReceiveMode(self, pre_task_finished):
        self.launch.shutdown()
        rospy.loginfo("task %s finished" % self.CurrentMode(self.current_mode).name)
        if self.current_mode <= len(self.CurrentMode):
            self.current_mode += 1
            rospy.loginfo("task %s starts" % self.CurrentMode(self.current_mode).name)
            self.launch = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + self.CurrentMode(self.current_mode).name + ".launch"])
            self.launch.start()              


    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_node_controller')
    node = CoreNodeController()
    node.main()
