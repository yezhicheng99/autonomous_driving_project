#!/usr/bin/env python
# -*- coding: utf-8 -*-

#!/usr/bin/env python
import roslib; 
import rospy

from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
from std_msgs.msg import UInt8

Peak_Reached = False

def callBack(odom_msg):
    vel_msg = Twist()
    global Peak_Reached
    if Peak_Reached == False:
        if odom_msg.pose.pose.position.x < -0.2:
            vel_msg.linear.x = 0.2
            vel_msg.angular.z = 0
            if odom_msg.pose.pose.position.y < -0.8:
                vel_msg.angular.z = 0.1
            elif odom_msg.pose.pose.position.y > -0.6:
                vel_msg.angular.z = -0.1
            velocity_publisher.publish(vel_msg)
        else:
            Peak_Reached = True
            vel_msg.linear.x = 0
            vel_msg.angular.z = 0
            velocity_publisher.publish(vel_msg)
            rospy.sleep(5)

    else:
        if odom_msg.pose.pose.position.x < 1.0:
            vel_msg.linear.x = 0.2
            vel_msg.angular.z = 0
            if odom_msg.pose.pose.position.y < -0.8:
                vel_msg.angular.z = 0.1
            elif odom_msg.pose.pose.position.y > -0.6:
                vel_msg.angular.z = -0.1
            velocity_publisher.publish(vel_msg)
        else:
            vel_msg.linear.x = 0
            vel_msg.angular.z = 0
            velocity_publisher.publish(vel_msg)
            msg_return = UInt8()
            msg_return.data = 1
            task_finish_publisher.publish(msg_return)
            


if __name__ == "__main__":
    rospy.init_node('up_hill', anonymous=True) #make node 
    
    rospy.Subscriber('odom', Odometry, callBack)
    velocity_publisher = rospy.Publisher('cmd_vel', Twist, queue_size=10)
    task_finish_publisher = rospy.Publisher('task_finished', UInt8, queue_size=1)
    rospy.spin()